openapi: 3.0.3
info:
  title: Application microservice
  description: Pre-scoring, request for calculation of possible offers and choosing one of these
  version: 1.0.0
  contact:
    name: Zentsova Anastasiia
    email: pestovnikovaanastasiia@gmail.com
servers:
  - url: http://localhost:8083/
    description: Development server
paths:
  /application:
    post:
      tags:
        - Application
      summary: Pre-scoring and request for calculation of possible loan offers
      operationId: calculateAllPossibleLoanOffers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoanApplicationRequestDto"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoanOfferDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"
  /application/offer:
    put:
      tags:
        - Application
      summary: Choosing one of the loan offers
      operationId: chooseOneOffer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoanOfferDto"
      responses:
        '200':
          description: Application is saved
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

components:
  schemas:
    LoanApplicationRequestDto:
      type: object
      properties:
        amount:
          type: number
          format: double
          minimum: 10000.00
          example: 1700000.00
        term:
          type: integer
          format: int32
          minimum: 6
          example: 180
        firstName:
          type: string
          pattern: ([a-zA-Z]{2,30})
          example: Ivan
        lastName:
          type: string
          pattern: ([a-zA-Z]{2,30})
          example: Ivanov
        middleName:
          type: string
          pattern: ([a-zA-Z]{2,30})
          example: Ivanovich
        email:
          type: string
          pattern: (^(?=.{1,64}@)[A-Za-z0-9_-]+(\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,})$)
          example: ivanii@google.com
        birthdate:
          type: string
          format: date
          pattern: (\d{4}-\d{2}-\d{2})
          example: 1991-01-01
        passportSeries:
          type: string
          pattern: \d{4}
          example: 8610
        passportNumber:
          type: string
          pattern: \d{6}
          example: 211009
      required:
        - amount
        - term
        - firstName
        - lastName
        - email
        - birthdate
        - passportSeries
        - passportNumber

    LoanOfferDto:
      type: object
      properties:
        applicationId:
          type: integer
          format: int64
          example: 1
        requestedAmount:
          type: number
          format: double
          example: 1700000.00
        totalAmount:
          type: number
          format: double
          example: 3000000.00
        term:
          type: integer
          format: int32
          example: 180
        monthlyPayment:
          type: number
          format: double
          example: 190000
        rate:
          type: number
          format: double
          example: 10.4
        isInsuranceEnabled:
          type: boolean
          example: false
        isSalaryClient:
          type: boolean
          example: true

    ApplicationError:
      type: object
      required:
        - statusCode
        - message
      properties:
        statusCode:
          type: integer
          minimum: 100
          maximum: 600
        message:
          type: string